// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package postgres

import (
	"context"
	"database/sql"
)

const createBio = `-- name: CreateBio :one
INSERT INTO bios (
  user_id, bio
) VALUES (
$1, $2
)
RETURNING id, user_id, bio
`

type CreateBioParams struct {
	UserID int64
	Bio    string
}

func (q *Queries) CreateBio(ctx context.Context, arg CreateBioParams) (Bio, error) {
	row := q.db.QueryRowContext(ctx, createBio, arg.UserID, arg.Bio)
	var i Bio
	err := row.Scan(&i.ID, &i.UserID, &i.Bio)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, password, img_url
) VALUES (
  $1, $2, $3
)
RETURNING id, name, password, img_url
`

type CreateUserParams struct {
	Name     string
	Password string
	ImgUrl   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password, arg.ImgUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.ImgUrl,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, img_url
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.ImgUrl,
	)
	return i, err
}

const getUserAndBio = `-- name: GetUserAndBio :one
SELECT u.id, u.name, u.img_url, b.bio
FROM users u
LEFT JOIN bios b
ON b.user_id = u.id
WHERE u.id = $1
`

type GetUserAndBioRow struct {
	ID     int64
	Name   string
	ImgUrl sql.NullString
	Bio    sql.NullString
}

func (q *Queries) GetUserAndBio(ctx context.Context, id int64) (GetUserAndBioRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAndBio, id)
	var i GetUserAndBioRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.Bio,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, password, img_url
FROM users
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.ImgUrl,
	)
	return i, err
}

const getUsersAndBio = `-- name: GetUsersAndBio :many
SELECT u.id, u.name, u.img_url, b.bio 
FROM users u
LEFT JOIN bios b
ON b.user_id = u.id
`

type GetUsersAndBioRow struct {
	ID     int64
	Name   string
	ImgUrl sql.NullString
	Bio    sql.NullString
}

func (q *Queries) GetUsersAndBio(ctx context.Context) ([]GetUsersAndBioRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersAndBio)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersAndBioRow
	for rows.Next() {
		var i GetUsersAndBioRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBio = `-- name: UpdateBio :one
UPDATE bios
SET bio=$1
WHERE id=$2
RETURNING id, user_id, bio
`

type UpdateBioParams struct {
	Bio string
	ID  int64
}

func (q *Queries) UpdateBio(ctx context.Context, arg UpdateBioParams) (Bio, error) {
	row := q.db.QueryRowContext(ctx, updateBio, arg.Bio, arg.ID)
	var i Bio
	err := row.Scan(&i.ID, &i.UserID, &i.Bio)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name=$1,password=$2,img_url=$3 
WHERE id=$4
RETURNING id, name, password, img_url
`

type UpdateUserParams struct {
	Name     string
	Password string
	ImgUrl   sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Password,
		arg.ImgUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.ImgUrl,
	)
	return i, err
}
